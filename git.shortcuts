# git快捷命令查询
> 
`master`：默认开发分支
`origin`：默认远程版本库
`Head`：默认开发分支
`Head^`：Head的父提交

## 创建版本库

```bash
$ git clone <url>  #克隆远程版本库
$ git init  #初始化本地版本库
```


## 修改和提交

``` bash
$ git status                     # 查看状态
$ git diff                       # 查看变更内容
$ git add .                      # 跟踪所有改动过的文件
$ git add <file>                 # 跟踪指定的文件
$ git mv <old> <new>             # 文件更名
$ git rm <file>                  # 删除文件
$ git rm --cached <file>         # 停止跟踪文件但不删除
$ git commit -m "commit message" # 提交所有更新过的文件
$ git commit --amend             # 修改最后一次提交
```


## 贮藏

```
$ git stash                      # 临时储藏工作到stash
$ git stash list                 # 查看stash内容
$ git stash apply                # 恢复stash内容
$ git stash drop                 # 删除stash内容
$ git stash pop                  # 恢复并删除stash内容
```


## 查看提交历史

```
$ git log                                          # 查看提交历史，确定回退版本
$ git log -1                                       # 显示最近的1条log
$ git reflog                                       # 查看命令历史，确定未来版本
$ git log -p <file>                                # 查看指定文件的提交历史
$ git blame <file>                                 # 以列表方式查看指定文件的提交历史
$ git log --graph                                  # 查看分支合并图
$ git log --graph --pretty=oneline --abbrev-commit # 以行方式查看分支合并图
$ git log --pretty=format:"%h %cd" --name-only -5  # 显示hash和时间
$ git log --pretty=format:"%h %cd" -5              # 查看修改时间
```


## 版本回退

```
$ git log fileName
$ git checkout <commit-id>  fineName
```


## 撤销

```
$ git reset --hard HEAD      # 撤销工作目录中所有的未提交
$ git reset --hard commit_id # 回到指定版本,不保留修改
$ git reset --soft commit_id # 回到指定版本,保留修改
$ git checkout HEAD <file>   # 撤销指定的未提交文件的修改内容
$ git checkout --file        # 直接撤销指定文件的修改内容
$ git revert <commit>        # 撤销指定的提交
$ git checkout .             # 本地所有修改的,没有提交的,返回到原来的状态
```
## 清理
> 再clean前,先使用 -n 参数查看会删除哪些文件 

```bash 
$ git clean -f               # 删除文件,不会动.gitignore里的标记
$ git clean -fd              # 删除目录和文件 删除未tracked的文件
$ git clean -xfd             # 删除文件/目录 连gitignore 的文件一起删除 

$ git clean -n               # 并不删除操作,只显示被清理的文件列表
$ git clean -nf
$ git clean -nfd
$ git clean -nxfd 

$ git clean -d               # 删除目录,但不会动.gitignore里的标记
$ git clean -X               # 仅删除.gitignore里标记的文件
```


## 分支与标签

```
$ git branch  #显示所有本地分支
$ git checkout <branch/tag>  #切换到指定的分支或标签
$ git branch <new-branch>  #创建新分支
$ git branch -b <new-branch>  #创建并切换到新分支
$ git branch -d <branch>  #删除本地分支
$ git branch -D <branch>  #强行删除本地分支
$ git tag  #列出所有本地标签
$ git tag <tagname>  #基于最新提交创建标签
$ git tag -a <tagname> -m "tag message"  #指定标签信息
$ git tag -d <tagname>  #删除标签
$ git branch -m old new
```

## 合并与衍合

```
$ git merge <branch>  #合并指定分支到当前分支
$ git merge --no-ff -m "merge message" <branch>  #使用普通模式合并指定分支到当前分支，合并后有分支合并历史记录
$ git rebase <branch>  #衍合指定分支到当前分支
```



## 远程操作

```
$ git remote -v                                            # 查看远程版本库信息
$ git remote show <remote>                                 # 查看指定远程库信息
$ git remote add <remote> <url>                            # 添加远程版本库
$ git fetch <remote>                                       # 从远程库获取代码
$ git pull <remote> <branch>                               # 下载代码并快速合并
$ git push <remote> <branch>                               # 上传代码并快速合并
$ git push -u <remote> <branch>                            # 第一次上传代码并快速合并
$ git push -all remote                                     # 推送所有分支
$ git checkout -b branch-name origin/branch-name           # 在本地创建和远程分支对应的分支(名称最好一致)
$ git branch --set-upstream branch-name origin/branch-name # 建立本地分支和远程分支的关联
$ git push <remote> : <branch/tagname>                     # 删除远程分支或标签
$ git push --tags                                          # 上传所有标签
$ git push origin <tagname>                                # 推送一个本地标签
$ git push origin --tags                                   # 推送全部未推送过的本地标签
$ git remote rename 旧名称  新名称
```



## 导出文件

```bash
$ git diff d20f63f 7f79753 --name-only | xargs tar -czvf ../update.tar.gz   #导出两个版本的差异文件
$ git diff d20f63f 7f79753 --name-only | xargs zip update.zip
$2020/07/03 git diff d20f63f HEAD --name-only | xargs zip update.zip   #导出到最新版本的文件
```


## 补丁
```bash
     #创建补丁
$ git format-patch -M master # 当前分支所有超前master的提交
$ git format-patch -s 4e16   # 某次提交以后所有的
$ git format-patch -1        # 单次提交
$ git format-patch -3        # 从master往前3个提交
     #应用补丁
$ git apply --start xxx.patch  #先检查patch文件
$ git apply --check xxx.patch  #检查能否应用补丁
$ git am --signoff < xxx.patch  #打补丁 (-s或--signoff : commit信息中加入Signed-off-by 信息)

```





## 去除已经添加到版本库的文件 
```bash 
$ git rm -r -n --cached  文件/目录  #(不会删除,只会列出被删除的列表) 
$ git rm -r --cached   文件/目录
#-r 表示递归 
#-n 表示列出 不删除 
#然后添加到.gitignore 中  
#最后提交

```


## git-svn

```bash
 $ git svn clone https://172.16.0.241:8443/svn/wsgjp/ -r 76896:HEAD --no-metadata --authors-file=svnuser.text --trunk=svnproject --branches=svnbranch yourGitProject

  #  r指定起止版本号。
  #   no-metadata阻止git导出SVN包含的一些无用信息。
  #   authors-file必须指定svn帐号在git中的映射。
  #   trunk指定导出仓库的主干项目路径。
  #   branches指定svn的分支项目路径。
	
 $ git svn --username=ZhangDezhi clone https://172.16.4.234/svn/ 
 $ git svn fetch --ignore-files=commit/abc/ddd.txt
 $ git svn fetch --ignore-files  commit/abc/ddd.txt
 $ git svn fetch --ignore-paths path/up/to/filename

```

### git-svn error及处理办法

```bash
$ git svn rebase
Index mismatch: ee615f21133503f1f2011b2e89c46c0d582e228c != 142c8a42b8adaa2656c624546390eede25af4ae9
rereading fc50702418f34c108d78ab56a8353fc30dcce9f5
        M       component/ialarm/almcore/source/almthread.cpp
        M       component/ialarm/almcore/source/almsysset.cpp
        M       component/ialarm/almcore/include/almsysset.h
        M       component/ialarm/zqtable/source/zqtable.cpp
        M       component/ialarm/zqtable/include/zqtable.h
        M       component/ialarm/alarmwindow/source/alarmwindow.cpp
        M       component/ialarm/alarmwindow/source/eventdlg.cpp
Checksum mismatch: component/ialarm/修改记录.txt fefcd7d00b80c4397a2b5b2e178eb0e79cb676b8
expected: c4ac3e14c694193943f6d9268e761ed0
     got: b92f1dbfaf50541d0dab70bd0ffe994f

### 处理办法:

$ git svn fetch --ignore-paths component/ialarm/修改记录.txt
$ git svn rebase
First, rewinding head to replay your work on top of it...
Fast-forwarded master to refs/remotes/git-svn.



```




为理解部份:

```cmd
参考: https://blog.csdn.net/weixin_33724659/article/details/85768978
## git svn rebase出现了checksum mismatch的错误
## 找到TableForm.cs文件的最后一次日志的svn版本号，目前找到是1701
$ git svn reset -r1701 -p
```


```cmd
## 参考: https://stackoverflow.com/questions/4073956/how-do-i-resolve-a-git-svn-index-mismatch
$ rm -r .git/svn
$ git svn fetch

```
