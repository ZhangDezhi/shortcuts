
指编译器选项,由qmake内部识别

# 注释

# CONFIG

| release                   |
| debug                     | 构建模式
| debug_and_release         | 两种模式构建
| debug_and_release_target  | 默认, 两种模式构建,在不同目录
| build_all                 |
| autogen_precompile_source | 自动生成一个.cpp文件.
| ordered                   | 使用subdirs模板,按照顺序处理
| precompile_header         | 使用预编译头文件支持          |
| warn_on                   | 输出更多的警告                |
| warn_off                  | 输出更少的警告
| ecceptions                | 默认,启动异常支持             |
| exceptions_off            | 禁用异常支持                  |
| rtti                      | 启用rtti支持
| rtti_off                  | 禁用rtti支持
| stl                       | 启动stl支持
| stl_off                   | 禁用stl支持
| thread                    | 启用线程支持                  |
| c++11                     | 启用c++11支持 默认禁用        |
| c++14                     | 启用c++14支持 默认禁用        |


```

build_pass:CONFIG(debug,debug|release){
unix:TARGET = $$join(TARGET..._debug)
			 else:TARGET = $$(TARGET...d)
}
```

# DEFINES

qmake 编译器预处理宏

```pro
DEFINE += USE_MY_STUFF
```
```cpp
#ifdef USE_MY_STUFF 
		//todo
#else
		//TODO
#endif
```

# DEPENDPATH
指定查看依赖关系的目录列表,当包涵文件时使用

```pro

DEPENDPATH += . forms include qrc sources
```

# DESTDIR 
指定何处放置目标文件

```pro
DESTDIR = ../../lib
```
#FORMS
指定ui文件在编译前被uic处理.
```pro
FORMS = mydialog.ui \
		mywidget.ui \
		myconfig.ui
```

# HEADERS
指定项目中所有的头文件.
```pro

HEADERS = myclass.h \
          login.h \
          mainwindow.h
```


# INCLUDEPATH
指定编译项目时应被搜索的include目录
```pro
INCLUDEPATH = c:/msdev/include d:/stl/include
#如果包涵空格,需要使用引号包涵
win32:INCLUDEPATH += "C:/mylibs/extra headers"
unix:INCLUDEPATH += "/home/user/extra headers"
```




# LIBS
指定连接到项目中的列表库
```pro
#如果使用Unix -l (library) 和 -L (library path) 标志
	win32:LIBS += c:/mylibs/math.lib
	unix:LIBS += -L/usr/local/lib -lmath
#如果路径包含空格，需要使用引号包含路径。
	win32:LIBS += "C:/mylibs/extra libs/extra.lib"
	unix:LIBS += "-L/home/user/extra libs" -lextra
```
# MOC_DIR
指定来自moc的所有中间文件放置的目录（含Q_OBJECT宏的头文件转换成标准.h文件的存放目录）。
```pro
unix:MOC_DIR = ../myproject/tmp
win32:MOC_DIR = c:/myproject/tmp
```


#OBJECTS_DIR
指定所有中间文件.o（.obj）放置的目录

```pro
unix:OBJECTS_DIR = ../myproject/tmp
win32:OBJECTS_DIR = c:/myproject/tmp
```

#QT
指定项目中使用的Qt模块
```pro
QT -= gui # 仅仅使用core模块,默认包涵core和gui
QT += core gui widgets xml network

```
# RCC_DIR
指定Qt资源编译器输出文件目录(.qrc文件转换成的qrc_.*h 文件)
```pro

unix:RCC_DIR = ../myproject/resources
win32:RCC_DIR = c:/myproject/resources

```

# RESOURCES 
指定资源文件(qrc)名称
```pro
RESOURCES += Resource/resource.qrc
```

# RC_FILE
指定应用程序资源文件的名称。这个变量的值通常是由qmake或qmake.conf处理，很少需要进行修改
```pro
RC_FILE += myapp.rc
```

# RC_ICONS

仅适用于Windows，指定的图标应该包含在一个生成的.rc文件里。如果RC_FILE 和RES_FILE变量都没有设置这才可利用。
```pro
RC_ICONS = myapp.ico
```

# SOURCES 
指定项目中所有源文件
```pro

SOURCES = myclass.cpp \
			login.cpp \
			mainwindow.cpp

```

# TARGET

指定目标文件的名称。默认情况下包含的项目文件的基本名称。
```pro
TEMPLATE = app
TARGET = myapp
SOURCES = main.cpp
#Windows下为myapp.exe，Unix下为myapp
```
# TEMPLATE 
模板变量告诉qmake为这个应用程序生成哪种makefile。

| app     | 默认.
| lib     |
| subdirs |
| aux     |
| vcapp   | 仅适用windows |
| vclib   | 仅适用windows |

# TRANSLATIONS
指定包含用户界面翻译文本的翻译(.ts)文件列表。
```pro
TRANSLATIONS += Resource/myapp_zh.ts \
			    Resource/myapp_en.ts

```

# UI_DIR
指定来自uic的所有中间文件放置的目录（.ui文件转化成ui_*.h文件的存放目录）。

```pro
unix:UI_DIR = ../myproject/ui
win32:UI_DIR = c:/myproject/ui
```
